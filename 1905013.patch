diff --git a/.vscode/c_cpp_properties.json b/.vscode/c_cpp_properties.json
new file mode 100644
index 0000000..b724e77
--- /dev/null
+++ b/.vscode/c_cpp_properties.json
@@ -0,0 +1,17 @@
+{
+    "configurations": [
+        {
+            "name": "Linux",
+            "includePath": [
+                "${workspaceFolder}/**"
+            ],
+            "defines": [],
+            "compilerPath": "/usr/bin/gcc",
+            "cStandard": "c17",
+            "cppStandard": "gnu++14",
+            "intelliSenseMode": "linux-gcc-x64",
+            "configurationProvider": "ms-vscode.makefile-tools"
+        }
+    ],
+    "version": 4
+}
\ No newline at end of file
diff --git a/Makefile b/Makefile
index 39a99d7..5902683 100644
--- a/Makefile
+++ b/Makefile
@@ -87,7 +87,7 @@ $U/initcode: $U/initcode.S
 tags: $(OBJS) _init
 	etags *.S *.c
 
-ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o
+ULIB = $U/ulib.o $U/usys.o $U/printf.o $U/umalloc.o $U/thread_spinlock.o $U/conditional_variable.o $U/thread_mutex.o  $U/user_queue.o $U/semaphore.o 
 
 _%: %.o $(ULIB)
 	$(LD) $(LDFLAGS) -T $U/user.ld -o $@ $^
@@ -132,6 +132,8 @@ UPROGS=\
 	$U/_grind\
 	$U/_wc\
 	$U/_zombie\
+	$U/_threads\
+	$U/_producer_consumer\
 
 fs.img: mkfs/mkfs README $(UPROGS)
 	mkfs/mkfs fs.img README $(UPROGS)
diff --git a/kernel/defs.h b/kernel/defs.h
index a3c962b..30a7088 100644
--- a/kernel/defs.h
+++ b/kernel/defs.h
@@ -106,6 +106,14 @@ void            yield(void);
 int             either_copyout(int user_dst, uint64 dst, void *src, uint64 len);
 int             either_copyin(void *dst, int user_src, uint64 src, uint64 len);
 void            procdump(void);
+int             thread_create(void *fcn, void *arg,void *stack);//adding for offline5
+int             thread_join(int);
+void            thread_exit(void);
+void            proc_freethreadpagetable(pagetable_t, uint64);
+void            thread_wakeup(int);
+void            thread_sleep(uint64);
+int            thread_copyout(pagetable_t,uint64);
+
 
 // swtch.S
 void            swtch(struct context*, struct context*);
@@ -173,6 +181,10 @@ uint64          walkaddr(pagetable_t, uint64);
 int             copyout(pagetable_t, uint64, char *, uint64);
 int             copyin(pagetable_t, char *, uint64, uint64);
 int             copyinstr(pagetable_t, char *, uint64, uint64);
+void            uvmmirror(pagetable_t old,pagetable_t new,uint64);
+void            uvmunmirror(pagetable_t, uint64);
+
+
 
 // plic.c
 void            plicinit(void);
diff --git a/kernel/proc.c b/kernel/proc.c
index 959b778..5f6a646 100644
--- a/kernel/proc.c
+++ b/kernel/proc.c
@@ -29,40 +29,39 @@ struct spinlock wait_lock;
 // Allocate a page for each process's kernel stack.
 // Map it high in memory, followed by an invalid
 // guard page.
-void
-proc_mapstacks(pagetable_t kpgtbl)
+void proc_mapstacks(pagetable_t kpgtbl)
 {
   struct proc *p;
-  
-  for(p = proc; p < &proc[NPROC]; p++) {
+
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     char *pa = kalloc();
-    if(pa == 0)
+    if (pa == 0)
       panic("kalloc");
-    uint64 va = KSTACK((int) (p - proc));
+    uint64 va = KSTACK((int)(p - proc));
     kvmmap(kpgtbl, va, (uint64)pa, PGSIZE, PTE_R | PTE_W);
   }
 }
 
 // initialize the proc table.
-void
-procinit(void)
+void procinit(void)
 {
   struct proc *p;
-  
+
   initlock(&pid_lock, "nextpid");
   initlock(&wait_lock, "wait_lock");
-  for(p = proc; p < &proc[NPROC]; p++) {
-      initlock(&p->lock, "proc");
-      p->state = UNUSED;
-      p->kstack = KSTACK((int) (p - proc));
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    initlock(&p->lock, "proc");
+    p->state = UNUSED;
+    p->kstack = KSTACK((int)(p - proc));
   }
 }
 
 // Must be called with interrupts disabled,
 // to prevent race with process being moved
 // to a different CPU.
-int
-cpuid()
+int cpuid()
 {
   int id = r_tp();
   return id;
@@ -70,7 +69,7 @@ cpuid()
 
 // Return this CPU's cpu struct.
 // Interrupts must be disabled.
-struct cpu*
+struct cpu *
 mycpu(void)
 {
   int id = cpuid();
@@ -79,7 +78,7 @@ mycpu(void)
 }
 
 // Return the current struct proc *, or zero if none.
-struct proc*
+struct proc *
 myproc(void)
 {
   push_off();
@@ -89,11 +88,10 @@ myproc(void)
   return p;
 }
 
-int
-allocpid()
+int allocpid()
 {
   int pid;
-  
+
   acquire(&pid_lock);
   pid = nextpid;
   nextpid = nextpid + 1;
@@ -106,16 +104,20 @@ allocpid()
 // If found, initialize state required to run in the kernel,
 // and return with p->lock held.
 // If there are no free procs, or a memory allocation fails, return 0.
-static struct proc*
+static struct proc *
 allocproc(void)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     acquire(&p->lock);
-    if(p->state == UNUSED) {
+    if (p->state == UNUSED)
+    {
       goto found;
-    } else {
+    }
+    else
+    {
       release(&p->lock);
     }
   }
@@ -124,9 +126,12 @@ allocproc(void)
 found:
   p->pid = allocpid();
   p->state = USED;
+  p->is_thread = 0;
+  p->mem_id = p->pid;
 
   // Allocate a trapframe page.
-  if((p->trapframe = (struct trapframe *)kalloc()) == 0){
+  if ((p->trapframe = (struct trapframe *)kalloc()) == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -134,7 +139,8 @@ found:
 
   // An empty user page table.
   p->pagetable = proc_pagetable(p);
-  if(p->pagetable == 0){
+  if (p->pagetable == 0)
+  {
     freeproc(p);
     release(&p->lock);
     return 0;
@@ -155,14 +161,22 @@ found:
 static void
 freeproc(struct proc *p)
 {
-  if(p->trapframe)
-    kfree((void*)p->trapframe);
+  if (p->trapframe)
+    kfree((void *)p->trapframe);
   p->trapframe = 0;
-  if(p->pagetable)
-    proc_freepagetable(p->pagetable, p->sz);
+  if (p->pagetable)
+  {
+
+    if (p->is_thread == 1)
+      proc_freethreadpagetable(p->pagetable, p->sz);
+    else
+      proc_freepagetable(p->pagetable, p->sz);
+  }
   p->pagetable = 0;
   p->sz = 0;
   p->pid = 0;
+  p->mem_id = 0;
+  p->is_thread = 0;
   p->parent = 0;
   p->name[0] = 0;
   p->chan = 0;
@@ -180,23 +194,25 @@ proc_pagetable(struct proc *p)
 
   // An empty page table.
   pagetable = uvmcreate();
-  if(pagetable == 0)
+  if (pagetable == 0)
     return 0;
 
   // map the trampoline code (for system call return)
   // at the highest user virtual address.
   // only the supervisor uses it, on the way
   // to/from user space, so not PTE_U.
-  if(mappages(pagetable, TRAMPOLINE, PGSIZE,
-              (uint64)trampoline, PTE_R | PTE_X) < 0){
+  if (mappages(pagetable, TRAMPOLINE, PGSIZE,
+               (uint64)trampoline, PTE_R | PTE_X) < 0)
+  {
     uvmfree(pagetable, 0);
     return 0;
   }
 
   // map the trapframe page just below the trampoline page, for
   // trampoline.S.
-  if(mappages(pagetable, TRAPFRAME, PGSIZE,
-              (uint64)(p->trapframe), PTE_R | PTE_W) < 0){
+  if (mappages(pagetable, TRAPFRAME, PGSIZE,
+               (uint64)(p->trapframe), PTE_R | PTE_W) < 0)
+  {
     uvmunmap(pagetable, TRAMPOLINE, 1, 0);
     uvmfree(pagetable, 0);
     return 0;
@@ -207,44 +223,47 @@ proc_pagetable(struct proc *p)
 
 // Free a process's page table, and free the
 // physical memory it refers to.
-void
-proc_freepagetable(pagetable_t pagetable, uint64 sz)
+void proc_freepagetable(pagetable_t pagetable, uint64 sz)
 {
   uvmunmap(pagetable, TRAMPOLINE, 1, 0);
   uvmunmap(pagetable, TRAPFRAME, 1, 0);
   uvmfree(pagetable, sz);
 }
+void proc_freethreadpagetable(pagetable_t pagetable, uint64 sz)
+{
+  uvmunmap(pagetable, TRAMPOLINE, 1, 0);
+  uvmunmap(pagetable, TRAPFRAME, 1, 0);
+  uvmunmirror(pagetable, sz);
+}
 
 // a user program that calls exec("/init")
 // assembled from ../user/initcode.S
 // od -t xC ../user/initcode
 uchar initcode[] = {
-  0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
-  0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
-  0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
-  0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
-  0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
-  0x00, 0x00, 0x00, 0x00
-};
+    0x17, 0x05, 0x00, 0x00, 0x13, 0x05, 0x45, 0x02,
+    0x97, 0x05, 0x00, 0x00, 0x93, 0x85, 0x35, 0x02,
+    0x93, 0x08, 0x70, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0x93, 0x08, 0x20, 0x00, 0x73, 0x00, 0x00, 0x00,
+    0xef, 0xf0, 0x9f, 0xff, 0x2f, 0x69, 0x6e, 0x69,
+    0x74, 0x00, 0x00, 0x24, 0x00, 0x00, 0x00, 0x00,
+    0x00, 0x00, 0x00, 0x00};
 
 // Set up first user process.
-void
-userinit(void)
+void userinit(void)
 {
   struct proc *p;
 
   p = allocproc();
   initproc = p;
-  
+
   // allocate one user page and copy initcode's instructions
   // and data into it.
   uvmfirst(p->pagetable, initcode, sizeof(initcode));
   p->sz = PGSIZE;
 
   // prepare for the very first "return" from kernel to user.
-  p->trapframe->epc = 0;      // user program counter
-  p->trapframe->sp = PGSIZE;  // user stack pointer
+  p->trapframe->epc = 0;     // user program counter
+  p->trapframe->sp = PGSIZE; // user stack pointer
 
   safestrcpy(p->name, "initcode", sizeof(p->name));
   p->cwd = namei("/");
@@ -256,18 +275,21 @@ userinit(void)
 
 // Grow or shrink user memory by n bytes.
 // Return 0 on success, -1 on failure.
-int
-growproc(int n)
+int growproc(int n)
 {
   uint64 sz;
   struct proc *p = myproc();
 
   sz = p->sz;
-  if(n > 0){
-    if((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0) {
+  if (n > 0)
+  {
+    if ((sz = uvmalloc(p->pagetable, sz, sz + n, PTE_W)) == 0)
+    {
       return -1;
     }
-  } else if(n < 0){
+  }
+  else if (n < 0)
+  {
     sz = uvmdealloc(p->pagetable, sz, sz + n);
   }
   p->sz = sz;
@@ -276,20 +298,21 @@ growproc(int n)
 
 // Create a new process, copying the parent.
 // Sets up child kernel stack to return as if from fork() system call.
-int
-fork(void)
+int fork(void)
 {
   int i, pid;
   struct proc *np;
   struct proc *p = myproc();
 
   // Allocate process.
-  if((np = allocproc()) == 0){
+  if ((np = allocproc()) == 0)
+  {
     return -1;
   }
 
   // Copy user memory from parent to child.
-  if(uvmcopy(p->pagetable, np->pagetable, p->sz) < 0){
+  if (uvmcopy(p->pagetable, np->pagetable, p->sz) < 0)
+  {
     freeproc(np);
     release(&np->lock);
     return -1;
@@ -303,8 +326,8 @@ fork(void)
   np->trapframe->a0 = 0;
 
   // increment reference counts on open file descriptors.
-  for(i = 0; i < NOFILE; i++)
-    if(p->ofile[i])
+  for (i = 0; i < NOFILE; i++)
+    if (p->ofile[i])
       np->ofile[i] = filedup(p->ofile[i]);
   np->cwd = idup(p->cwd);
 
@@ -327,13 +350,14 @@ fork(void)
 
 // Pass p's abandoned children to init.
 // Caller must hold wait_lock.
-void
-reparent(struct proc *p)
+void reparent(struct proc *p)
 {
   struct proc *pp;
 
-  for(pp = proc; pp < &proc[NPROC]; pp++){
-    if(pp->parent == p){
+  for (pp = proc; pp < &proc[NPROC]; pp++)
+  {
+    if (pp->parent == p)
+    {
       pp->parent = initproc;
       wakeup(initproc);
     }
@@ -343,17 +367,68 @@ reparent(struct proc *p)
 // Exit the current process.  Does not return.
 // An exited process remains in the zombie state
 // until its parent calls wait().
-void
-exit(int status)
+void exit(int status)
 {
   struct proc *p = myproc();
 
-  if(p == initproc)
+  if (p->is_thread != 1)
+  {
+    // only run for a process
+
+    acquire(&wait_lock);
+    while (1)
+    {
+
+      uint16 haschild = 0;
+      // printf("starting the for lopp...haschild %d\n", haschild);
+      for (struct proc *child = proc; child < &proc[NPROC]; child++)
+      {
+        // printf("child pid child->is_thread parent id %d  %d %d \n", child->pid,child->is_thread,p->pid);
+
+        if (child->is_thread && child->mem_id == p->pid)
+        {
+
+          acquire(&child->lock);
+          // printf("i am entering............\n ");
+          // printf("my id = %d   ",child->pid);
+          // printf("haschild now %d\n", haschild);
+          uint16 hadchild = haschild;
+          haschild = 1;
+          if (child->state == ZOMBIE)
+          {
+
+            haschild = hadchild;
+            //   printf("----------freeing child\n");
+            // printf("---------hadchild %d   \n", hadchild);
+            // printf("----------haschild %d    \n", haschild);
+            freeproc(child);
+          }
+          release(&child->lock);
+        }
+      }
+
+      //  printf("I am finnaly done---------- haschild = %d   \n",haschild);
+
+      if (!haschild || killed(p))
+      {
+        // printf("ok done!(!!!!!!!!!!!!!!!!\n");
+        break;
+      }
+
+      sleep(p, &wait_lock);
+      //  printf("i am awakeee............\n ");
+    }
+    release(&wait_lock);
+  }
+
+  if (p == initproc)
     panic("init exiting");
 
   // Close all open files.
-  for(int fd = 0; fd < NOFILE; fd++){
-    if(p->ofile[fd]){
+  for (int fd = 0; fd < NOFILE; fd++)
+  {
+    if (p->ofile[fd])
+    {
       struct file *f = p->ofile[fd];
       fileclose(f);
       p->ofile[fd] = 0;
@@ -372,7 +447,7 @@ exit(int status)
 
   // Parent might be sleeping in wait().
   wakeup(p->parent);
-  
+
   acquire(&p->lock);
 
   p->xstate = status;
@@ -387,8 +462,7 @@ exit(int status)
 
 // Wait for a child process to exit and return its pid.
 // Return -1 if this process has no children.
-int
-wait(uint64 addr)
+int wait(uint64 addr)
 {
   struct proc *pp;
   int havekids, pid;
@@ -396,20 +470,25 @@ wait(uint64 addr)
 
   acquire(&wait_lock);
 
-  for(;;){
+  for (;;)
+  {
     // Scan through table looking for exited children.
     havekids = 0;
-    for(pp = proc; pp < &proc[NPROC]; pp++){
-      if(pp->parent == p){
+    for (pp = proc; pp < &proc[NPROC]; pp++)
+    {
+      if (pp->parent == p)
+      {
         // make sure the child isn't still in exit() or swtch().
         acquire(&pp->lock);
 
         havekids = 1;
-        if(pp->state == ZOMBIE){
+        if (pp->state == ZOMBIE)
+        {
           // Found one.
           pid = pp->pid;
-          if(addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
-                                  sizeof(pp->xstate)) < 0) {
+          if (addr != 0 && copyout(p->pagetable, addr, (char *)&pp->xstate,
+                                   sizeof(pp->xstate)) < 0)
+          {
             release(&pp->lock);
             release(&wait_lock);
             return -1;
@@ -424,13 +503,14 @@ wait(uint64 addr)
     }
 
     // No point waiting if we don't have any children.
-    if(!havekids || killed(p)){
+    if (!havekids || killed(p))
+    {
       release(&wait_lock);
       return -1;
     }
-    
+
     // Wait for a child to exit.
-    sleep(p, &wait_lock);  //DOC: wait-sleep
+    sleep(p, &wait_lock); // DOC: wait-sleep
   }
 }
 
@@ -441,20 +521,22 @@ wait(uint64 addr)
 //  - swtch to start running that process.
 //  - eventually that process transfers control
 //    via swtch back to the scheduler.
-void
-scheduler(void)
+void scheduler(void)
 {
   struct proc *p;
   struct cpu *c = mycpu();
-  
+
   c->proc = 0;
-  for(;;){
+  for (;;)
+  {
     // Avoid deadlock by ensuring that devices can interrupt.
     intr_on();
 
-    for(p = proc; p < &proc[NPROC]; p++) {
+    for (p = proc; p < &proc[NPROC]; p++)
+    {
       acquire(&p->lock);
-      if(p->state == RUNNABLE) {
+      if (p->state == RUNNABLE)
+      {
         // Switch to chosen process.  It is the process's job
         // to release its lock and then reacquire it
         // before jumping back to us.
@@ -478,19 +560,18 @@ scheduler(void)
 // be proc->intena and proc->noff, but that would
 // break in the few places where a lock is held but
 // there's no process.
-void
-sched(void)
+void sched(void)
 {
   int intena;
   struct proc *p = myproc();
 
-  if(!holding(&p->lock))
+  if (!holding(&p->lock))
     panic("sched p->lock");
-  if(mycpu()->noff != 1)
+  if (mycpu()->noff != 1)
     panic("sched locks");
-  if(p->state == RUNNING)
+  if (p->state == RUNNING)
     panic("sched running");
-  if(intr_get())
+  if (intr_get())
     panic("sched interruptible");
 
   intena = mycpu()->intena;
@@ -499,8 +580,7 @@ sched(void)
 }
 
 // Give up the CPU for one scheduling round.
-void
-yield(void)
+void yield(void)
 {
   struct proc *p = myproc();
   acquire(&p->lock);
@@ -511,15 +591,15 @@ yield(void)
 
 // A fork child's very first scheduling by scheduler()
 // will swtch to forkret.
-void
-forkret(void)
+void forkret(void)
 {
   static int first = 1;
 
   // Still holding p->lock from scheduler.
   release(&myproc()->lock);
 
-  if (first) {
+  if (first)
+  {
     // File system initialization must be run in the context of a
     // regular process (e.g., because it calls sleep), and thus cannot
     // be run from main().
@@ -531,12 +611,11 @@ forkret(void)
 }
 
 // Atomically release lock and sleep on chan.
-// Reacquires lock when awakened.
-void
-sleep(void *chan, struct spinlock *lk)
+// Reacquires lock when awakfened.
+void sleep(void *chan, struct spinlock *lk)
 {
   struct proc *p = myproc();
-  
+
   // Must acquire p->lock in order to
   // change p->state and then call sched.
   // Once we hold p->lock, we can be
@@ -544,7 +623,7 @@ sleep(void *chan, struct spinlock *lk)
   // (wakeup locks p->lock),
   // so it's okay to release lk.
 
-  acquire(&p->lock);  //DOC: sleeplock1
+  acquire(&p->lock); // DOC: sleeplock1
   release(lk);
 
   // Go to sleep.
@@ -560,38 +639,106 @@ sleep(void *chan, struct spinlock *lk)
   release(&p->lock);
   acquire(lk);
 }
+int
+thread_copyout(pagetable_t pagetable, uint64 dstva)
+{
+  uint64  va0, pa0;
+
+  
+    va0 = PGROUNDDOWN(dstva);
+    pa0 = walkaddr(pagetable, va0);
+    if(pa0 == 0)
+      return -1;
+     __sync_synchronize();
+  __sync_lock_release((uint8*)(pa0+(dstva-va0)));
+
+   
+ 
+  return 0;
+}
+void thread_sleep(uint64 addr)
+{
+  struct proc *p = myproc();
+
+  // Must acquire p->lock in order to
+  // change p->state and then call sched.
+  // Once we hold p->lock, we can be
+  // guaranteed that we won't miss any wakeup
+  // (wakeup locks p->lock),
+  // so it's okay to release lk.
+
+  acquire(&p->lock); // DOC: sleeplock1
+  // release(lk);
+  thread_copyout(p->pagetable,addr);
+  //printf("helooooooooooooo\n");
+
+  // Go to sleep.
+ 
+  p->state = SLEEPING;
+
+  sched();
+
+  // Tidy up.
+ 
+
+  // Reacquire original lock.
+  release(&p->lock);
+  
+
+}
 
 // Wake up all processes sleeping on chan.
 // Must be called without any p->lock.
-void
-wakeup(void *chan)
+void wakeup(void *chan)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++) {
-    if(p != myproc()){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p != myproc())
+    {
       acquire(&p->lock);
-      if(p->state == SLEEPING && p->chan == chan) {
+      if (p->state == SLEEPING && p->chan == chan)
+      {
         p->state = RUNNABLE;
       }
       release(&p->lock);
     }
   }
 }
+void thread_wakeup(int pid)
+{
+ struct proc *p;
+
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p != myproc())
+    {
+      acquire(&p->lock);
+      if (p->state == SLEEPING  && p->pid==pid)
+      {
+        p->state = RUNNABLE;
+      }
+      release(&p->lock);
+    }
+  } 
+}
 
 // Kill the process with the given pid.
 // The victim won't exit until it tries to return
 // to user space (see usertrap() in trap.c).
-int
-kill(int pid)
+int kill(int pid)
 {
   struct proc *p;
 
-  for(p = proc; p < &proc[NPROC]; p++){
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
     acquire(&p->lock);
-    if(p->pid == pid){
+    if (p->pid == pid)
+    {
       p->killed = 1;
-      if(p->state == SLEEPING){
+      if (p->state == SLEEPING)
+      {
         // Wake process from sleep().
         p->state = RUNNABLE;
       }
@@ -603,19 +750,17 @@ kill(int pid)
   return -1;
 }
 
-void
-setkilled(struct proc *p)
+void setkilled(struct proc *p)
 {
   acquire(&p->lock);
   p->killed = 1;
   release(&p->lock);
 }
 
-int
-killed(struct proc *p)
+int killed(struct proc *p)
 {
   int k;
-  
+
   acquire(&p->lock);
   k = p->killed;
   release(&p->lock);
@@ -625,13 +770,15 @@ killed(struct proc *p)
 // Copy to either a user address, or kernel address,
 // depending on usr_dst.
 // Returns 0 on success, -1 on error.
-int
-either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
+int either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_dst){
+  if (user_dst)
+  {
     return copyout(p->pagetable, dst, src, len);
-  } else {
+  }
+  else
+  {
     memmove((char *)dst, src, len);
     return 0;
   }
@@ -640,14 +787,16 @@ either_copyout(int user_dst, uint64 dst, void *src, uint64 len)
 // Copy from either a user address, or kernel address,
 // depending on usr_src.
 // Returns 0 on success, -1 on error.
-int
-either_copyin(void *dst, int user_src, uint64 src, uint64 len)
+int either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 {
   struct proc *p = myproc();
-  if(user_src){
+  if (user_src)
+  {
     return copyin(p->pagetable, dst, src, len);
-  } else {
-    memmove(dst, (char*)src, len);
+  }
+  else
+  {
+    memmove(dst, (char *)src, len);
     return 0;
   }
 }
@@ -655,25 +804,24 @@ either_copyin(void *dst, int user_src, uint64 src, uint64 len)
 // Print a process listing to console.  For debugging.
 // Runs when user types ^P on console.
 // No lock to avoid wedging a stuck machine further.
-void
-procdump(void)
+void procdump(void)
 {
   static char *states[] = {
-  [UNUSED]    "unused",
-  [USED]      "used",
-  [SLEEPING]  "sleep ",
-  [RUNNABLE]  "runble",
-  [RUNNING]   "run   ",
-  [ZOMBIE]    "zombie"
-  };
+      [UNUSED] "unused",
+      [USED] "used",
+      [SLEEPING] "sleep ",
+      [RUNNABLE] "runble",
+      [RUNNING] "run   ",
+      [ZOMBIE] "zombie"};
   struct proc *p;
   char *state;
 
   printf("\n");
-  for(p = proc; p < &proc[NPROC]; p++){
-    if(p->state == UNUSED)
+  for (p = proc; p < &proc[NPROC]; p++)
+  {
+    if (p->state == UNUSED)
       continue;
-    if(p->state >= 0 && p->state < NELEM(states) && states[p->state])
+    if (p->state >= 0 && p->state < NELEM(states) && states[p->state])
       state = states[p->state];
     else
       state = "???";
@@ -681,3 +829,159 @@ procdump(void)
     printf("\n");
   }
 }
+
+int thread_create(void *fcn, void *arg, void *stack)
+{
+  int i, pid;
+  struct proc *np;           // the child thread
+  struct proc *p = myproc(); // getting the parent process
+  // int * ustack = stack + PGSIZE - sizeof(void*);//setting the stack pointer
+
+  // allocate process.
+  if ((np = allocproc()) == 0)
+    return -1;
+
+  // np->pagetable = proc->pagetable;
+  uvmmirror(p->pagetable, np->pagetable, p->sz);
+  // uvmcopy(p->pagetable,np->pagetable,p->sz);
+
+  // same size as parent
+  np->sz = p->sz;
+  *(np->trapframe) = *(p->trapframe); // Change new child's tf
+
+  // np->trapframe->sp = (uint64) ustack - sizeof(void*);
+  np->trapframe->sp = (uint64)stack + PGSIZE - sizeof(void *);
+
+  np->trapframe->epc = (uint64)fcn;
+  np->trapframe->a0 = (uint64)arg;
+  // *ustack = (uint64) arg; // 7
+  // panic("nabid");
+  //   *(ustack - 1) = 0xffffffff;
+  //   *(ustack - 2) = 0xffffffff;
+
+  for (i = 0; i < NOFILE; i++)
+    if (p->ofile[i])
+      np->ofile[i] = filedup(p->ofile[i]); // inspect
+  np->cwd = idup(p->cwd);
+
+  safestrcpy(np->name, p->name, sizeof(p->name));
+
+  pid = np->pid;
+  release(&np->lock);
+
+  acquire(&wait_lock);
+  np->parent = p;
+  release(&wait_lock);
+
+  acquire(&np->lock);
+  np->state = RUNNABLE;
+  np->is_thread = 1;
+  release(&np->lock);
+
+  int tid = -1;
+  acquire(&p->lock);
+  tid = p->pid;
+  release(&p->lock);
+  acquire(&np->memlock);
+  np->mem_id = tid;
+  release(&np->memlock);
+
+pid=tid;
+  return pid;
+}
+
+int thread_join(int tid)
+{
+  struct proc *p = myproc();
+  // printf("from thread join my mother id = %d", p->pid);
+  // printf("tid provided=%d\n", tid);
+  struct proc *child;
+
+  acquire(&wait_lock);
+
+  for (;;)
+  {
+    int found = 0;
+    //printf("i am from thread_join\n ");
+
+    // Iterate through child threads to find the one with the given tid
+    for (child = proc; child < &proc[NPROC]; child++)
+    {
+      acquire(&child->lock);
+      //printf("i am a child and my id =%d ,my thread identity %d my parent id %d\n", child->pid, child->is_thread, p->pid);
+      if (child->parent == p && child->is_thread && child->mem_id == tid)
+      {
+        found = 1;
+        //printf("i am iterating the loop and here is a child with pid =%d\n", child->pid);
+        if (child->state == ZOMBIE)
+        {
+          //printf("child is a zombie\n");
+          int exit_status = child->xstate;
+          freeproc(child);
+          release(&child->lock);
+          release(&wait_lock);
+          return exit_status;
+        }
+      }
+    //  printf("found state inside loop %d\n", found);
+      release(&child->lock);
+    }
+  //  printf("found state %d \n", found);
+    // If child not found or not in ZOMBIE state, wait
+    if (!found || killed(p))
+    {
+    //  printf("killing the process\n");
+      release(&wait_lock);
+      return -1; // Child not found or process is killed
+    }
+
+    // Wait for the child to exit
+   // printf("i sleep\n");
+    sleep(p, &wait_lock); // DOC: wait-sleep
+    //printf("i wake up\n");
+  }
+}
+void thread_exit()
+{
+  struct proc *p = myproc();
+  if (p->is_thread != 1)
+    return;
+
+  if (p == initproc)
+    panic("init exiting");
+
+  // Close all open files.
+  for (int fd = 0; fd < NOFILE; fd++)
+  {
+    if (p->ofile[fd])
+    {
+      struct file *f = p->ofile[fd];
+      fileclose(f);
+      p->ofile[fd] = 0;
+    }
+  }
+
+  begin_op();
+  iput(p->cwd);
+  end_op();
+  p->cwd = 0;
+
+  acquire(&wait_lock);
+
+  // Give any children to init.
+  reparent(p);
+
+  // Parent might be sleeping in wait().
+  wakeup(p->parent);
+
+  acquire(&p->lock);
+
+  p->xstate = 1;
+  p->state = ZOMBIE;
+
+  release(&wait_lock);
+
+  // Jump into the scheduler, never to return.
+  sched();
+  panic("zombie exit");
+}
\ No newline at end of file
diff --git a/kernel/proc.h b/kernel/proc.h
index d021857..cca0833 100644
--- a/kernel/proc.h
+++ b/kernel/proc.h
@@ -104,4 +104,12 @@ struct proc {
   struct file *ofile[NOFILE];  // Open files
   struct inode *cwd;           // Current directory
   char name[16];               // Process name (debugging)
+
+
+  //added for offline5
+	// previous ones
+  struct spinlock memlock;	// find places to set and release the locks 
+  int is_thread;               // if it is thread
+  int mem_id;                   // All threads will have the same physical pages with the mothrer, hence the same memory ID
+
 };
diff --git a/kernel/syscall.c b/kernel/syscall.c
index ed65409..ca96af7 100644
--- a/kernel/syscall.c
+++ b/kernel/syscall.c
@@ -101,6 +101,12 @@ extern uint64 sys_unlink(void);
 extern uint64 sys_link(void);
 extern uint64 sys_mkdir(void);
 extern uint64 sys_close(void);
+extern uint64 sys_thread_create(void);
+extern uint64 sys_thread_join(void);
+extern uint64 sys_thread_exit(void);
+extern uint64 sys_thread_yield(void);
+extern uint64 sys_thread_wakeup(void);
+extern uint64 sys_thread_sleep(void);
 
 // An array mapping syscall numbers from syscall.h
 // to the function that handles the system call.
@@ -126,6 +132,12 @@ static uint64 (*syscalls[])(void) = {
 [SYS_link]    sys_link,
 [SYS_mkdir]   sys_mkdir,
 [SYS_close]   sys_close,
+[SYS_thread_create] sys_thread_create,
+[SYS_thread_join] sys_thread_join,
+[SYS_thread_exit] sys_thread_exit,
+[SYS_thread_yield] sys_thread_yield,
+[SYS_thread_wakeup] sys_thread_wakeup,
+[SYS_thread_sleep] sys_thread_sleep,
 };
 
 void
diff --git a/kernel/syscall.h b/kernel/syscall.h
index bc5f356..e8f5c13 100644
--- a/kernel/syscall.h
+++ b/kernel/syscall.h
@@ -20,3 +20,9 @@
 #define SYS_link   19
 #define SYS_mkdir  20
 #define SYS_close  21
+#define SYS_thread_create 22
+#define SYS_thread_join 23
+#define SYS_thread_exit 24
+#define SYS_thread_yield 25
+#define SYS_thread_wakeup 26
+#define SYS_thread_sleep 27
\ No newline at end of file
diff --git a/kernel/sysproc.c b/kernel/sysproc.c
index 1de184e..1df887c 100644
--- a/kernel/sysproc.c
+++ b/kernel/sysproc.c
@@ -89,3 +89,51 @@ sys_uptime(void)
   release(&tickslock);
   return xticks;
 }
+uint64
+sys_thread_create(void)
+{
+  uint64 fcn, arg, stack;
+  argaddr(0, &fcn);
+  argaddr(1, &arg);
+  argaddr(2, &stack);
+  return thread_create((void*)fcn, (void*)arg, (void*)stack);
+}
+uint64
+sys_thread_join(void)
+{
+  int thread;
+ argint(0, &thread);
+  return thread_join(thread);
+}
+uint64
+sys_thread_exit(void)
+{
+
+  
+  thread_exit();
+  return 0;
+}
+uint64
+sys_thread_yield(void)
+{
+  yield();
+  return 0;
+
+}
+uint64
+sys_thread_wakeup()
+{
+  int t;
+  argint(0,&t);
+  thread_wakeup(t);
+  return 0;
+}
+uint64
+sys_thread_sleep()
+{
+  uint64 addr;
+  argaddr(0,&addr);
+
+  thread_sleep(addr);
+  return 0;
+}
\ No newline at end of file
diff --git a/kernel/vm.c b/kernel/vm.c
index 9f69783..0239541 100644
--- a/kernel/vm.c
+++ b/kernel/vm.c
@@ -296,6 +296,14 @@ uvmfree(pagetable_t pagetable, uint64 sz)
   freewalk(pagetable);
 }
 
+void
+uvmunmirror(pagetable_t pagetable, uint64 sz)
+{
+  if(sz > 0)
+    uvmunmap(pagetable, 0, PGROUNDUP(sz)/PGSIZE, 0);
+  freewalk(pagetable);
+}
+
 // Given a parent process's page table, copy
 // its memory into a child's page table.
 // Copies both the page table and the
@@ -331,6 +339,20 @@ uvmcopy(pagetable_t old, pagetable_t new, uint64 sz)
   uvmunmap(new, 0, i / PGSIZE, 1);
   return -1;
 }
+void 
+uvmmirror(pagetable_t old,pagetable_t new,uint64 sz)
+{
+  pte_t *pte1;
+  pte_t *pte2;
+  for(uint64 l=0;l<sz;l=l+PGSIZE)
+  {
+    if((pte1=walk(old,l,0))==0)
+      panic("uvmmirror: pte1 should exist");
+    if((pte2=walk(new,l,1))==0)
+      panic("uvmmirror: pte2 should exist");
+    *pte2=*pte1;
+  }
+}
 
 // mark a PTE invalid for user access.
 // used by exec for the user stack guard page.
diff --git a/user/conditional_variable.c b/user/conditional_variable.c
new file mode 100644
index 0000000..e69de29
diff --git a/user/conditional_variable.h b/user/conditional_variable.h
new file mode 100644
index 0000000..6894168
--- /dev/null
+++ b/user/conditional_variable.h
@@ -0,0 +1,22 @@
+// Define the queue structure
+#include "thread_mutex.h"
+#include "user_queue.h"
+
+#define MAX_QUEUE_SIZE 1000
+struct user_queue {
+    int data[MAX_QUEUE_SIZE];
+    int front;
+    int rear;
+    int size;
+};
+
+// Initialize the queue
+
+struct conditional_variable
+{
+   struct user_queue prcoess_queue;
+  struct  thread_mutex cond_mutex;
+
+
+};
+// #include "conditional_variable.h"
diff --git a/user/producer_consumer.c b/user/producer_consumer.c
new file mode 100644
index 0000000..ea39de8
--- /dev/null
+++ b/user/producer_consumer.c
@@ -0,0 +1,168 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#include "semaphore.h"
+
+
+struct conditional_variable* cnd;
+struct thread_mutex tm;
+struct thread_sem full;
+struct thread_sem empty;
+
+struct queue{
+	int arr[16];
+	int front;
+	int rear;
+	int size;
+
+};
+
+	void queue(struct queue *q)
+	{
+		q->front = 0;
+		q->rear = 0;
+		q->size = 0;
+	}
+	void push(struct queue *q,int x)
+	{
+		q->arr[q->rear] = x;
+		
+		q->rear = (q->rear+1)%16;
+	
+
+		q->size++;
+		;
+	}
+	int front(struct queue *q)
+	{
+		if(q->size==0)
+			return -1;
+		return q->arr[q->front];
+	}
+	void pop(struct queue *q)
+	{
+		q->front = (q->front+1)%16;
+		q->size--;
+	}
+
+// a mutex object lock 
+// a semaphore object empty
+// a semaphore object full
+struct queue q;
+volatile unsigned int delay(unsigned int d)
+{
+    unsigned int i;
+    for (i = 0; i < d; i++)
+    {
+        __asm volatile("nop" ::
+                           :);
+    }
+
+    return i;
+}
+
+void init_semaphore()
+{
+	// initialize mutex lock
+	// initialize semaphore empty with 5
+	// initialize semaphore full with 0
+	sem_init(&full,0);
+	sem_init(&empty,5);
+
+}
+
+void  ProducerFunc(void * arg)
+{	
+	
+	int i;
+	for(i=1;i<=10;i++)
+	{
+		// wait for semphore empty
+		sem_wait(&empty);
+
+		// wait for mutex lock
+		
+		 sleep(1);
+		thread_mutex_lock(&tm);	
+
+		push(&q,i);
+		printf("producer produced item %d\n",i);
+		
+				 delay(10000);
+
+		
+		
+		thread_mutex_unlock(&tm);
+		
+		// unlock mutex lock	
+		// post semaphore full
+		sem_post(&full);
+
+	}
+	thread_exit();
+	return;
+}
+
+
+void  ConsumerFunc(void * arg)
+{
+	//printf("%s\n",(char*)arg);
+	int i;
+	for(i=1;i<=10;i++)
+	{	
+		// waifor semphore full
+		// wait for mutex lock
+ 		
+			
+		 sleep(1);
+		sem_wait(&full);
+		thread_mutex_lock(&tm);
+		int item = front(&q);
+		pop(&q);
+		printf("consumer consumed item %d\n",item);	
+		 delay(10000);
+		
+		thread_mutex_unlock(&tm);
+		sem_post(&empty);
+
+
+		// unlock mutex lock
+		// post semaphore empty		
+	}
+	thread_exit();
+	return;
+}
+
+int main(void)
+{	
+	//
+	
+	// full=malloc(sizeof(struct thread_sem));
+	// empty=malloc(sizeof(struct thread_sem));
+
+
+	thread_mutex_init(&tm);
+	init_semaphore();
+	
+	char * message1 = "i am producer";
+	char * message2 = "i am consumer";
+
+
+	void *s1, *s2;
+  	int thread1,r1, r2,thread2;
+
+  	s1 = malloc(4096);
+	 s2 = malloc(4096);
+	
+
+
+  	thread1 = thread_create((void*)ProducerFunc, (void*)message1, s1);
+  	 thread2 = thread_create((void*)ConsumerFunc, (void*)message2, s2); 
+
+  	r1 = thread_join(thread1);
+  	 r2 = thread_join(thread2);	
+	printf("%d %d\n",r1,r2);
+	
+	exit(1);
+}
diff --git a/user/semaphore.c b/user/semaphore.c
new file mode 100644
index 0000000..e69de29
diff --git a/user/semaphore.h b/user/semaphore.h
new file mode 100644
index 0000000..3dad2f5
--- /dev/null
+++ b/user/semaphore.h
@@ -0,0 +1,7 @@
+#include "conditional_variable.h"
+
+struct thread_sem {
+    int count; 
+   struct thread_mutex m;
+    struct conditional_variable  cv;
+} ;
diff --git a/user/thread_mutex.c b/user/thread_mutex.c
new file mode 100644
index 0000000..9916b48
--- /dev/null
+++ b/user/thread_mutex.c
@@ -0,0 +1,168 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+
+#include "semaphore.h"
+
+
+void thread_mutex_init(struct thread_mutex *lk) {
+    lk->locked = 0;
+
+}
+
+// int
+// mutex_holding(struct thread_mutex *lk)
+// {
+//   int r;
+//   r = (lk->locked==1);
+//   printf("holding: %d\n", r);
+//   return r;
+// }
+
+void
+thread_mutex_lock(struct thread_mutex *lk)
+{
+  
+
+ 
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+  {
+    sleep(1);
+    //printf("thread_mutex_lock: %d\n", lk->locked);
+    //thread_yield();
+  }
+    
+
+  //  printf("thread_acquire: %d\n", lk->locked);
+
+
+
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  
+}
+void
+thread_mutex_unlock(struct thread_mutex *lk)
+{
+  
+
+  
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+    //printf("thread_release: %d\n", lk->locked);
+
+ 
+}
+
+
+int sem_init(struct thread_sem *sem,int count)
+{
+    //  printf("initalized semaphore ");
+    // printf("count = %d\n",count);
+    sem->count =count;
+    
+//        printf("sem->m = %d sem->count %d \n",sem->m,sem->count);
+
+    thread_mutex_init(&sem->m);
+    cond_init(&sem->cv); 
+   
+    return 0;
+}
+void sem_post(struct thread_sem *s) {
+   thread_mutex_lock(&s->m);
+     //  printf("sem_post::before:: sem_count= %d\n",s->count);
+
+    s->count++;
+
+    cond_signal(&s->cv);
+    thread_mutex_unlock(&s->m);
+}
+void sem_wait(struct thread_sem *s)
+{
+    thread_mutex_lock(&s->m);
+        // printf("sem_wait::before:: sem_count= %d\n",s->count);
+
+    while(s->count==0)
+    {
+        cond_wait(&s->cv,&s->m);
+    }
+    s->count--;
+
+    thread_mutex_unlock(&s->m);
+}
+
+
+// #include "user_queue.h"
+void initQueue(struct user_queue *q) {
+    q->front = 0;
+    q->rear = 0;
+    q->size = 0;
+}
+
+// Check if the queue is empty
+int isQueueEmpty(struct user_queue *q) {
+    return (q->rear < q->front);
+}
+
+// Check if the queue is full
+int isQueueFull(struct user_queue *q) {
+    return (q->rear >= MAX_QUEUE_SIZE - 1);
+}
+
+// Enqueue an element into the queue
+void enqueue(struct user_queue *q, int value) {
+    q->data[q->rear] = value;
+    q->rear=(q->rear+1)%MAX_QUEUE_SIZE;
+    q->size++;
+   
+}
+
+// Dequeue an element from the queue
+int dequeue(struct user_queue *q) {
+   if(q->size==0)
+   {
+    return -1;
+   }
+    int x=q->data[q->front];
+    q->front=(q->front+1)%MAX_QUEUE_SIZE;
+    q->size--;
+    return x;
+}
+void cond_init(struct conditional_variable *cv)
+{
+    //initialize the conditional variable
+    initQueue(&cv->prcoess_queue);//the queue of a cond_var has been initialized
+thread_mutex_init(&cv->cond_mutex);//the mutex of a cond_var has been initialized
+
+
+
+
+}
+void cond_wait(struct conditional_variable *cv,struct thread_mutex *mx)
+{
+    
+thread_mutex_lock(&cv->cond_mutex);//this is a mutex for protecting the queue operation
+//perform an enqueue operation
+int pid=getpid();//get the pid of the process
+enqueue(&cv->prcoess_queue,pid);
+
+thread_mutex_unlock(&cv->cond_mutex);
+//i have to both unlock the held mutex and put the process in sleep
+//has to be atomic process
+// thread_mutex_unlock(mx);
+thread_sleep(&mx->locked);
+thread_mutex_lock(mx);
+}
+void cond_signal(struct conditional_variable *cv)
+{
+   thread_mutex_lock(&cv->cond_mutex);
+   int p=dequeue(&cv->prcoess_queue);
+   thread_mutex_unlock(&cv->cond_mutex);
+   if(p>0)
+{
+    //i have to wakeup
+    thread_wakeup(p);
+   }
+}
+
diff --git a/user/thread_mutex.h b/user/thread_mutex.h
new file mode 100644
index 0000000..369da12
--- /dev/null
+++ b/user/thread_mutex.h
@@ -0,0 +1,7 @@
+// Mutual exclusion lock.
+struct thread_mutex {
+  unsigned int locked;       // Is the lock held?
+
+  // For debugging:
+  char *name;        // Name of lock.   // The cpu holding the lock.
+};
diff --git a/user/thread_spinlock.c b/user/thread_spinlock.c
new file mode 100644
index 0000000..c802c18
--- /dev/null
+++ b/user/thread_spinlock.c
@@ -0,0 +1,49 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "thread_spinlock.h"
+void thread_spin_init(struct thread_spinlock *lk) {
+    lk->locked = 0;
+;
+    
+}
+
+int
+holding(struct thread_spinlock *lk)
+{
+  int r;
+  r = (lk->locked==1);
+  printf("holding: %d\n", r);
+  return r;
+}
+
+void
+thread_acquire(struct thread_spinlock *lk)
+{
+  
+
+ 
+  while(__sync_lock_test_and_set(&lk->locked, 1) != 0)
+    ;
+
+  //  printf("thread_acquire: %d\n", lk->locked);
+
+
+
+  __sync_synchronize();
+
+  // Record info about lock acquisition for holding() and debugging.
+  
+}
+void
+thread_release(struct thread_spinlock *lk)
+{
+  
+
+  
+  __sync_synchronize();
+  __sync_lock_release(&lk->locked);
+    //printf("thread_release: %d\n", lk->locked);
+
+ 
+}
\ No newline at end of file
diff --git a/user/thread_spinlock.h b/user/thread_spinlock.h
new file mode 100644
index 0000000..1a3356b
--- /dev/null
+++ b/user/thread_spinlock.h
@@ -0,0 +1,7 @@
+// Mutual exclusion lock.
+struct thread_spinlock {
+  unsigned int locked;       // Is the lock held?
+
+  // For debugging:
+  char *name;        // Name of lock.   .
+};
diff --git a/user/threads.c b/user/threads.c
new file mode 100644
index 0000000..480cec1
--- /dev/null
+++ b/user/threads.c
@@ -0,0 +1,113 @@
+#include "kernel/types.h"
+#include "kernel/stat.h"
+#include "user/user.h"
+#include "user/thread_spinlock.h"
+#include "user/thread_mutex.h"
+struct balance
+{
+    char name[32];
+    int amount;
+};
+struct thread_spinlock *balance_lock;
+struct thread_mutex *lock;
+volatile int total_balance = 0;
+
+volatile unsigned int delay(unsigned int d)
+{
+    unsigned int i;
+    for (i = 0; i < d; i++)
+    {
+        __asm volatile("nop" ::
+                           :);
+    }
+
+    return i;
+}
+
+// void do_work(void *arg){
+//     int i;
+//     //int old;
+
+//     struct balance *b = (struct balance*) arg;
+
+//     for (i = 0; i < b->amount; i++) {
+//     thread_acquire(balance_lock);
+//          printf( "Starting do_work :%s\n", b->name);
+
+//       i++;
+//        printf("%s: %d\n",b->name, i);
+//       total_balance++;
+//            printf( "Done :%s\n", b->name);
+
+//       thread_release(balance_lock);
+
+//     }
+
+//     thread_exit();
+//     return;
+// }
+void do_work(void *arg)
+{
+    int i;
+    int old;
+
+    struct balance *b = (struct balance *)arg;
+    printf("Starting do_work: :%s\n", b->name);
+
+    for (i = 0; i < b->amount; i++)
+    {
+        // lock and mlock will be implemented by you.
+
+        // thread_acquire(balance_lock);
+        thread_mutex_lock(lock);
+        old = total_balance;
+        delay(100000);
+        // if(old != total_balance)  printf("we will miss an update. old: %d total_balance: %d\n", old, total_balance);
+        total_balance = old + 1;
+        printf("index = %d -----%s: %d\n", i, b->name, total_balance);
+        thread_mutex_unlock(lock);
+        //add this to test mutex
+        for(int i=0;i<1000000;i++)
+        ;
+        
+        // thread_release(balance_lock);
+    }
+
+    printf("Done :%s\n", b->name);
+
+    thread_exit();
+    return;
+}
+
+int main(int argc, char *argv[])
+{
+    balance_lock = malloc(sizeof(struct thread_spinlock));
+    lock = malloc(sizeof(struct thread_mutex));
+
+    // thread_spin_init(balance_lock);
+    thread_mutex_init(lock);
+
+    struct balance b1 = {"b1", 300};
+    struct balance b2 = {"b2", 450};
+
+    void *s1, *s2;
+    int thread1, thread2, r1, r2;
+
+    s1 = malloc(4096); // 4096 is the PGSIZE defined in kernel/riscv.h
+    s2 = malloc(4096);
+
+    thread1 = thread_create(do_work, (void *)&b1, s1);
+    thread2 = thread_create(do_work, (void *)&b2, s2);
+
+    r1 = thread_join(thread1);
+    r2 = thread_join(thread2);
+    // while(1)
+    // {
+
+    // }
+    total_balance = b1.amount + b2.amount;
+    printf("Threads finished: (%d):%d, (%d):%d, shared balance:%d\n",
+           thread1, r1, thread2, r2, total_balance);
+
+    exit(1);
+}
\ No newline at end of file
diff --git a/user/ulib.c b/user/ulib.c
index c7b66c4..70126ff 100644
--- a/user/ulib.c
+++ b/user/ulib.c
@@ -145,3 +145,4 @@ memcpy(void *dst, const void *src, uint n)
 {
   return memmove(dst, src, n);
 }
+
diff --git a/user/user.h b/user/user.h
index 4d398d5..e94947d 100644
--- a/user/user.h
+++ b/user/user.h
@@ -1,5 +1,9 @@
 struct stat;
-
+struct thread_spinlock;//adding for offline5
+struct thread_mutex;//adding for offline5
+struct conditional_variable;
+struct user_queue;//added for offline5
+struct thread_sem;//added for offline5
 // system calls
 int fork(void);
 int exit(int) __attribute__((noreturn));
@@ -22,8 +26,14 @@ int getpid(void);
 char* sbrk(int);
 int sleep(int);
 int uptime(void);
+int thread_create(void (*fcn)(void*), void *arg, void *stack);//adding for offline5
+int thread_join(int);//adding for offline5
+int thread_exit();//adding for offline5
+int thread_yield();//adding for offline5
+int thread_wakeup(int);//added for cond_variable
+int thread_sleep(unsigned int*);//added for cond_variable
 
-// ulib.c
+//ulib.c
 int stat(const char*, struct stat*);
 char* strcpy(char*, const char*);
 void *memmove(void*, const void*, int);
@@ -39,3 +49,20 @@ void free(void*);
 int atoi(const char*);
 int memcmp(const void *, const void *, uint);
 void *memcpy(void *, const void *, uint);
+void thread_spin_init(struct thread_spinlock *lk);//adding for offline5
+void thread_acquire(struct thread_spinlock *lk);//adding for offline5
+void thread_release(struct thread_spinlock *lk);//adding for offline5
+void thread_mutex_init(struct thread_mutex *lk);//adding for offline5
+void thread_mutex_lock(struct thread_mutex *lk);//adding for offline5
+void thread_mutex_unlock(struct thread_mutex *lk);//adding for offline5
+void initQueue(struct user_queue *q);
+int isQueueEmpty(struct user_queue *q);
+int isQueueFull(struct user_queue *q);
+void enqueue(struct user_queue *q,int val);
+int dequeue(struct user_queue *q);
+void cond_init(struct conditional_variable *cv);
+void cond_wait(struct conditional_variable *cv,struct thread_mutex* mt);
+void cond_signal(struct conditional_variable* cv);
+int sem_init(struct thread_sem *s,int count);
+void sem_wait(struct thread_sem *s);
+void sem_post(struct thread_sem *s);
\ No newline at end of file
diff --git a/user/user_queue.c b/user/user_queue.c
new file mode 100644
index 0000000..e69de29
diff --git a/user/user_queue.h b/user/user_queue.h
new file mode 100644
index 0000000..e69de29
diff --git a/user/usys.pl b/user/usys.pl
index 01e426e..3fc1db0 100755
--- a/user/usys.pl
+++ b/user/usys.pl
@@ -36,3 +36,9 @@ entry("getpid");
 entry("sbrk");
 entry("sleep");
 entry("uptime");
+entry("thread_create");
+entry("thread_join");
+entry("thread_exit");
+entry("thread_yield");
+entry("thread_wakeup");
+entry("thread_sleep");
\ No newline at end of file
